{"version":3,"sources":["assets/3448683-1.png","GeographySelector.js","Map.js","SearchBar.js","Spinner.js","TrainRouteMap.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","GeographySelector","_ref","label","setSelectedGeography","selectedGeography","React","createElement","htmlFor","id","value","onChange","event","target","Map","routeImage","src","alt","style","width","height","SearchBar","geography","placeholder","onSelect","selectedStation","stations","setStations","useState","isLoading","setIsLoading","error","setError","filteredData","setFilteredData","wordEntered","setWordEntered","selectedStationDetails","setSelectedStationDetails","useEffect","stationDetails","find","s","name","async","response","fetch","concat","ok","Error","data","json","message","fetchStations","className","type","searchWord","toLowerCase","newFilter","filter","station","includes","admin1","admin2","country","length","map","index","key","onClick","cleanedName","trim","handleSelectStation","Spinner","TrainRouteMap","geo","depart","dest","startRouting","coordinates","appearstations","L","setView","customIcon","icon","iconUrl","markerIcon","iconSize","popupAnchor","shadowSize","tileLayer","maxZoom","addTo","routeLatLngs","coord","lng","lat","split","Number","polyline","color","fitBounds","getBounds","console","Array","isArray","forEach","isFirstOrLast","marker","bindTooltip","permanent","openTooltip","bindPopup","remove","App","startStation","setStartStation","setGeography","destinationStation","setDestinationStation","setRouteImage","routeDetails","setRouteDetails","failedtoRoute","setfailedtoRoute","displayMap","setDisplayMap","initiatedsearch","setInitiatedSearch","isDynamicMap","setIsDynamicMap","setStartRouting","routeCoordinates","setRouteCoordinates","stationsData","setStationsData","intermedStations","setIntermedStations","toggleDisplay","startStationIndex","Math","floor","random","destinationStationIndex","alert","coordsResponse","coordsData","detailsResponse","detailsData","routeResponse","blob","imageUrl","URL","createObjectURL","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75e1598f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/3448683-1.6f1fe84c.png\";","import React from 'react';\n\nfunction GeographySelector({ label, setSelectedGeography, selectedGeography }) {\n  const handleGeographyChange = (event) => {\n    setSelectedGeography(event.target.value);\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"geography-select\">{label}</label>\n      <select id=\"geography-select\" value={selectedGeography} onChange={handleGeographyChange}>\n        <option value=\"\">Please Select a Geography</option>\n        <option value=\"uk\">United Kingdom</option>\n        <option value=\"belgium\">Belgium</option>\n        <option value=\"france\">France</option>\n        <option value=\"italy\">Italy</option>\n      </select>\n    </div>\n  );\n}\n\nexport default GeographySelector;\n","// In Map.js\nimport React from 'react';\n\nconst Map = ({ routeImage }) => {\n  return (\n    <div>\n      {routeImage ? <img src={routeImage} alt=\"Route Map\" style={{ width: '100%', height: 'auto' }} /> : 'Route map will be displayed here.'}\n    </div>\n  );\n};\n\nexport default Map;\n\n","import React, { useEffect, useState } from 'react';\nimport \"./searchBar.css\"\n\nfunction SearchBar({geography, placeholder, onSelect, selectedStation}){\n    const [stations, setStations] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [filteredData, setFilteredData] = useState([]);\n    const [wordEntered, setWordEntered] = useState(\"\");\n    const [selectedStationDetails, setSelectedStationDetails] = useState(null);\n\n\n    useEffect(() => {\n      setSelectedStationDetails(null);\n      setWordEntered(selectedStation || \"\");\n      if (selectedStation) {\n        const stationDetails = stations.find(s => s.name === selectedStation);\n        setSelectedStationDetails(stationDetails || null);\n      }\n    }, [selectedStation, stations]);\n\n    const handleSelectStation = (name) => {\n        const cleanedName = name.trim(); \n        setWordEntered(cleanedName);\n        setFilteredData([])\n        onSelect(name); \n    }\n\n    const handleFilter = (event) => {\n      setSelectedStationDetails(null);\n      const searchWord = event.target.value.toLowerCase();\n      setWordEntered(searchWord);\n      const newFilter = stations.filter((station) => {\n          return (\n              station.name.toLowerCase().includes(searchWord) ||\n              (station.admin1 && station.admin1.toLowerCase().includes(searchWord)) ||\n              (station.admin2 && station.admin2.toLowerCase().includes(searchWord)) ||\n              (station.country && station.country.toLowerCase().includes(searchWord))\n          );\n      });\n  \n      setFilteredData(searchWord === \"\" ? [] : newFilter);\n  };\n  \n\n    useEffect(() => {\n      const fetchStations = async () => {\n        setIsLoading(true);\n        try {\n          const response = await fetch(`https://railroads-production.up.railway.app/api/${geography}/stations`);\n          if (!response.ok) {\n            throw new Error('Something went wrong!');\n          }\n          const data = await response.json();\n          setStations(data);\n        } catch (error) {\n          setError(error.message);\n        }\n        setIsLoading(false);\n      };\n\n      if (geography) {\n        fetchStations();\n      }\n    }, [geography]);\n\n    return (\n      <div className=\"search\">\n          <div className=\"searchInputs\">\n              <input\n                  type=\"text\"\n                  placeholder={placeholder}\n                  value={wordEntered}\n                  onChange={handleFilter}\n              />\n          </div>\n          {selectedStationDetails && ( \n            <div className=\"station-selected-details\">\n                <p>{selectedStationDetails.admin1}, {selectedStationDetails.admin2}, {selectedStationDetails.country}</p>\n            </div>\n        )}\n          {filteredData.length !== 0 && (\n              <div className=\"dataResult\">\n                  {isLoading && <div>Loading...</div>}\n                  {error && <div>Error: {error}</div>}\n                  {filteredData.map((station, index) => (\n                  <div key={index} className=\"dataItem\" onClick={() => handleSelectStation(station.name)}>\n                      <p className=\"station-name\">{station.name.trim()}</p>\n                      <p className=\"station-details\">\n                      {station.admin2}, {station.admin1}, {station.country}\n                      </p>\n                  </div>\n                  ))}\n              </div>\n          )}\n      </div>\n  );\n                  }\nexport default SearchBar","import React from 'react';\nimport './Spinner.css'; \n\nfunction Spinner() {\n  return (\n    <div className=\"spinner-container\">\n      <div className=\"loading-spinner\"></div>\n    </div>\n  );\n}\n\nexport default Spinner;\n","import React, { useEffect } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './TrainRouteMap.css';\nimport markerIcon from './assets/3448683-1.png';\n\n\nconst TrainRouteMap = ({ geo, depart, dest, startRouting, coordinates, stations, appearstations}) => {\n  useEffect(() => {\n    if (!startRouting) return;\n    if(!coordinates && !stations) return;\n\n    const map = L.map('map').setView([54.9679903, -2.4627642], 8); \n\n    const customIcon = L.icon({\n        iconUrl: markerIcon,\n        iconSize: [25, 25], \n        popupAnchor: [1, -34], \n        shadowSize: [41, 41] \n    });\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19,\n    }).addTo(map);\n\n    const routeLatLngs = coordinates.map(coord => {\n      const [lng, lat] = coord.split(', ').map(Number);\n      return [lat, lng];\n    });\n\n    if (routeLatLngs.length > 1) {\n      const polyline = L.polyline(routeLatLngs, { color: 'blue' }).addTo(map);\n      map.fitBounds(polyline.getBounds());\n    } else {\n      console.error('Insufficient data for route coordinates: ', routeLatLngs);\n    }\n    if (Array.isArray(stations)) {\n      stations.forEach((station, index) => {\n        const [lng, lat] = station.coordinates;\n        \n        const isFirstOrLast = index === 0 || index === stations.length - 1;\n    \n        if (isFirstOrLast || appearstations) {\n          let marker = L.marker([lat, lng], {icon: customIcon}).addTo(map);\n          \n          if (isFirstOrLast) {\n            marker.bindTooltip(station.name, {permanent: true}).openTooltip();\n          } else {\n            marker.bindPopup(station.name);\n          }\n        }\n      });\n    }\n    else {\n      console.error('stationsData is not an array:', stations);\n    }\n    return () => map.remove();\n    }, [geo, depart, dest, startRouting, coordinates, stations, appearstations]);\n\n  return <div id=\"map\" className=\"map-container\"></div>;\n};\n\nexport default TrainRouteMap;\n","\"use client\"\nimport React, { useState} from 'react';\nimport GeographySelector from \"./GeographySelector\"\nimport Map from './Map';\nimport './App.css';\nimport SearchBar from \"./SearchBar\"\nimport Spinner from './Spinner';\nimport TrainRouteMap from './TrainRouteMap';\n\n\nfunction App() {\n  const [startStation, setStartStation] = useState('');\n  const [geography, setGeography] = useState('');\n  const [destinationStation, setDestinationStation] = useState('');\n  const [routeImage, setRouteImage] = useState(null); \n  const [routeDetails, setRouteDetails] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [failedtoRoute, setfailedtoRoute] = useState(false)\n  const [displayMap, setDisplayMap] = useState(false);\n  const [initiatedsearch, setInitiatedSearch] = useState(false);\n  const [isDynamicMap, setIsDynamicMap] = useState(true);\n  const [startRouting, setStartRouting] = useState(false);\n  const [routeCoordinates, setRouteCoordinates] = useState([]);\n  const [stationsData, setStationsData] = useState(\"\");\n  const [intermedStations, setIntermedStations] = useState(false);\n\n\n  const toggleDisplay = () => {\n    setDisplayMap(!displayMap); \n  };\n\n  const handleMapTypeToggle = () => {\n    setIsDynamicMap(!isDynamicMap);\n  };\n\n  const handleFindRoute = async () => {\n    try {\n      setStartRouting(true);\n      setDisplayMap(true);\n      setIsLoading(true);\n      setfailedtoRoute(false);\n      setInitiatedSearch(true);\n      const coordsResponse = await fetch(`https://railroads-production.up.railway.app/api/route/coords/${geography}/${startStation}/${destinationStation}`);\n      if (coordsResponse.ok) {\n        const coordsData = await coordsResponse.json();\n        setRouteCoordinates(coordsData[0]);\n        setStationsData(coordsData[1]);\n      } else {\n        throw new Error('Failed to fetch route coordinates');\n      }\n      const detailsResponse = await fetch(`https://railroads-production.up.railway.app/api/route/details/${geography}/${startStation}/${destinationStation}`);\n      if (detailsResponse.ok) {\n        const detailsData = await detailsResponse.json(); \n        setIsLoading(false);\n        setRouteDetails(detailsData); \n        const routeResponse = await fetch(`https://railroads-production.up.railway.app/api/route/${geography}/${startStation}/${destinationStation}`);\n        if (routeResponse.ok) {\n          const blob = await routeResponse.blob();\n          const imageUrl = URL.createObjectURL(blob);\n          setRouteImage(imageUrl);\n          setIsLoading(false);\n        }\n      } else {\n        setIsLoading(false);\n        setfailedtoRoute(true);\n        setRouteImage(null);\n        setRouteDetails([]);\n      }\n    } catch (error) {\n      setIsLoading(false);\n      setfailedtoRoute(true);\n      setRouteImage(null);\n      setRouteDetails([]);\n    }\n  };\n\n  const generateRandomStations = async () => {\n    if (!geography) \n    {\n      alert('Please select a geography first.');\n      return;\n    }\n    try {\n      const response = await fetch(`https://railroads-production.up.railway.app/api/${geography}/stations`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch stations');\n      }\n      const stationsData = await response.json();\n\n      let startStationIndex = Math.floor(Math.random() * stationsData.length);\n      let destinationStationIndex = Math.floor(Math.random() * stationsData.length);\n      while (destinationStationIndex === startStationIndex) {\n        destinationStationIndex = Math.floor(Math.random() * stationsData.length);\n      }\n\n    setStartStation(stationsData[startStationIndex].name);\n    setDestinationStation(stationsData[destinationStationIndex].name);\n\n  } catch (error) {\n    console.error('Error fetching stations:', error);\n    setIsLoading(false);\n  }\n  }\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        RailRouter\n      </header>\n      <div className=\"ContentwMap\">\n\n        <div className=\"Content\">\n          <div className=\"Selectors-wrapper\">\n            <div className=\"Selectors\">\n              <GeographySelector\n                label=\"Choose a geography\"\n                setSelectedGeography={setGeography}\n                selectedGeography={geography}\n              />\n              <SearchBar geography={geography} placeholder={\"Enter Departure Station\"} onSelect={setStartStation} selectedStation={startStation}/>\n              <SearchBar geography={geography} placeholder=\"Enter Destination Station\" onSelect={setDestinationStation} selectedStation={destinationStation} />\n              <button className=\"random-station-generator\" onClick={generateRandomStations}>Generate Random Stations</button>\n              <div className=\"stationContainer\">\n                <div className=\"textstations\">\n                <p>Show Stations on Route</p>\n                </div>\n                <button className={`toggle-btn ${intermedStations ? \"toggled\" : \"\"}`} onClick={()=>setIntermedStations(!intermedStations)}>\n                <div className=\"thumb\"></div>\n              </button>\n              </div>\n            \n            </div>\n            <button className=\"find-route-button\" onClick={handleFindRoute}>Find Route</button>\n            {failedtoRoute && (\n          <div className=\"error-box\">\n            <p>No route exists between the two selected stations. Please try again.</p>\n            </div>\n        )}\n            {isLoading && (\n                <div className=\"loading-container\">\n                  <p>Loading map. This may take a while...</p>\n                  <Spinner />\n                </div>\n              )}\n          </div>\n\n          <div className=\"Output-Components\">\n            {!isLoading && initiatedsearch && !failedtoRoute && ( \n              <div className = \"toggle-bar\">\n              <div className={`slider ${displayMap === true ? 'left' : 'right'}`}></div>\n              <button className={`toggle-option ${displayMap === true ? 'active': ''}`}\n                onClick={()=>toggleDisplay()}>\n                  Map\n              </button>\n              <button className={`toggle-option ${displayMap === false ? 'active': ''}`}\n                onClick={()=>toggleDisplay()}>\n                  Details\n              </button>\n              </div>\n              )}\n          {displayMap && !isDynamicMap && (\n            <div className=\"MapContainer\">\n              {!isLoading && <Map routeImage={routeImage} />}\n            </div>\n          ) }\n          {displayMap && isDynamicMap && (\n            <TrainRouteMap geo={geography} depart={startStation} dest={destinationStation} startRouting={startRouting} coordinates={routeCoordinates} stations={stationsData} appearstations={intermedStations}/>\n          )}\n\n            {!displayMap && initiatedsearch && !isLoading && (\n              <div className=\"RouteDetails\">\n              <h2>Route Details</h2>\n            {routeDetails.length > 0 ? (\n            <ul>\n              {routeDetails.map((station, index) => {\n                return (\n                  <li key={index}>{station}</li> \n                );\n              })}\n            </ul>\n          ) : (\n            <p>No route details available.</p>\n          )}\n            </div>\n            )\n          }\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}